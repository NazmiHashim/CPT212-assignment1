import java.util.Arrays;

class RadixSort2 {

    // Using counting sort to sort the elements in the basis of significant places
    void countingSort2(float array[], float list[], int size, int place) {
        float[] output = new float[size];
        int[] count = new int[10];


        // Calculate count of elements
        for (int i = 0; i < size; i++)
            count[(int) (array[i] / place) % 10]++;

        // Calculate cumulative count
        for (int i = 1; i < 10; i++)
            count[i] += count[i - 1];

        // Place the elements in sorted order
        for (int i = size - 1; i >= 0; i--) {
            output[count[(int) (array[i] / place) % 10] - 1] = array[i];
            count[(int) (array[i] / place) % 10]--;
        }

        for (int i = 0; i < size; i++)
            list[i] = output[i];
    }

    // Function to get the largest element from an array
    float getMax2(float array[], int n) {
        float max = array[0];
        for (int i = 1; i < n; i++)
            if (array[i] > max)
                max = array[i];
        return max;
    }

    // Main function to implement radix sort
    void radixSort2(float array[], int size) {
        // Get maximum element
        float max = getMax2(array, size);

        float[] copy = new float[size];
        System.arraycopy(array, 0, copy, 0, size);

        for (int i = 0; i < size; i++)
            copy[i] = copy[i] * 100000;

        float[] pass1 = new float[size];
        float[] pass2 = new float[size];

        // Using System.arraycopy() method to copy array elements
        System.arraycopy(copy, 0, pass1, 0, size);

        boolean checkEven = false;

        // Apply counting sort to sort elements based on place value.
        for (int place = 1; (int) (max * place) > 0; place *= 10){
            if(!checkEven){
                countingSort2(pass1, pass2, size, place);
                checkEven = true;
            } else{
                countingSort2(pass2, pass1, size, place);
                checkEven = false;
            }
        }


        if(!checkEven) {
            for (int i = 0; i < size; i++)
                pass1[i] = pass1[i] / 100000;
            System.arraycopy(pass1, 0, array, 0, size);
        }else {
            for (int i = 0; i < size; i++)
                pass2[i] = pass2[i] / 100000;
            System.arraycopy(pass2, 0, array, 0, size);
        }
    }

//    public static int highestDecimalPoint(float[] arr) {
//        int maxDecimalPoints = 0;
//        for (float f : arr) {
//            String[] parts = String.valueOf(f).split("\\.");
//            for (int i = 0; i < 7; i++){
//                String numberD = String.valueOf(f[i]);
//                numberD = numberD.substring(numberD.indexOf("."));
//
//            }
//
//            if (parts.length > 1) {
//                int numDecimalPoints = parts[1].length();
//                if (numDecimalPoints > maxDecimalPoints) {
//                    maxDecimalPoints = numDecimalPoints;
//                }
//            }
//        }
//        return maxDecimalPoints;
//    }

    public static int countDecimalPlaces(float num) {
        String numberD = String.valueOf(num);
        numberD = numberD.substring(numberD.indexOf("."));
        System.out.println(numberD);
        return numberD.length();
    }

    // Driver code
    public static void main(String args[]) {
        float[] data = {21.44445f, 432.8f, 21.44444f, 23.743f, 2111.43562f, 1.3f, 45.9f};
        //float[] data = {123.22f, 32.42349876f,15.77f};
        int size = data.length;
        RadixSort2 rs2 = new RadixSort2();
        rs2.radixSort2(data, size);
        System.out.println("Sorted Array in Ascending Order: ");
        System.out.println(Arrays.toString(data));

//        int maxDecimalPlaces = highestDecimalPoint(data);
//        System.out.println("Max decimal places: " + maxDecimalPlaces);
//        float num = 13.651f;
//        float xnum = num * 1000;
//        System.out.println(xnum);
//         xnum = xnum / 1000;
//        System.out.println(xnum);
//        int decimalPlaces = countDecimalPlaces(xnum);
//        System.out.println(decimalPlaces);
    }
}
